from pyspark.sql.types import *

CLUSTER = 0
LOCAL = 1
EVENTS = 'export'
MENTIONS = 'mentions'
OUT_DIR = 'output'
EVENTS_SCHEMA = StructType([
    StructField("GLOBALEVENTID", LongType(), True),
    StructField("Day_DATE", StringType(), True),
    StructField("MonthYear_Date", StringType(), True),
    StructField("Year_Date", StringType(), True),
    StructField("FractionDate", FloatType(), True),
    StructField("Actor1Code", StringType(), True),
    StructField("Actor1Name", StringType(), True),
    StructField("Actor1CountryCode", StringType(), True),
    StructField("Actor1KnownGroupCode", StringType(), True),
    StructField("Actor1EthnicCode", StringType(), True),
    StructField("Actor1Religion1Code", StringType(), True),
    StructField("Actor1Religion2Code", StringType(), True),
    StructField("Actor1Type1Code", StringType(), True),
    StructField("Actor1Type2Code", StringType(), True),
    StructField("Actor1Type3Code", StringType(), True),
    StructField("Actor2Code", StringType(), True),
    StructField("Actor2Name", StringType(), True),
    StructField("Actor2CountryCode", StringType(), True),
    StructField("Actor2KnownGroupCode", StringType(), True),
    StructField("Actor2EthnicCode", StringType(), True),
    StructField("Actor2Religion1Code", StringType(), True),
    StructField("Actor2Religion2Code", StringType(), True),
    StructField("Actor2Type1Code", StringType(), True),
    StructField("Actor2Type2Code", StringType(), True),
    StructField("Actor2Type3Code", StringType(), True),
    StructField("IsRootEvent", LongType(), True),
    StructField("EventCode", StringType(), True),
    StructField("EventBaseCode", StringType(), True),
    StructField("EventRootCode", StringType(), True),
    StructField("QuadClass", LongType(), True),
    StructField("GoldsteinScale", FloatType(), True),
    StructField("NumMentions", LongType(), True),
    StructField("NumSources", LongType(), True),
    StructField("NumArticles", LongType(), True),
    StructField("AvgTone", FloatType(), True),
    StructField("Actor1Geo_Type", LongType(), True),
    StructField("Actor1Geo_FullName", StringType(), True),
    StructField("Actor1Geo_CountryCode", StringType(), True),
    StructField("Actor1Geo_ADM1Code", StringType(), True),
    StructField("Actor1Geo_ADM2Code", StringType(), True),
    StructField("Actor1Geo_Lat", FloatType(), True),
    StructField("Actor1Geo_Long", FloatType(), True),
    StructField("Actor1Geo_FeatureID", StringType(), True),
    StructField("Actor2Geo_Type", LongType(), True),
    StructField("Actor2Geo_FullName", StringType(), True),
    StructField("Actor2Geo_CountryCode", StringType(), True),
    StructField("Actor2Geo_ADM1Code", StringType(), True),
    StructField("Actor2Geo_ADM2Code", StringType(), True),
    StructField("Actor2Geo_Lat", FloatType(), True),
    StructField("Actor2Geo_Long", FloatType(), True),
    StructField("Actor2Geo_FeatureID", StringType(), True),
    StructField("ActionGeo_Type", LongType(), True),
    StructField("ActionGeo_FullName", StringType(), True),
    StructField("ActionGeo_CountryCode", StringType(), True),
    StructField("ActionGeo_ADM1Code", StringType(), True),
    StructField("ActionGeo_ADM2Code", StringType(), True),
    StructField("ActionGeo_Lat", FloatType(), True),
    StructField("ActionGeo_Long", FloatType(), True),
    StructField("ActionGeo_FeatureID", StringType(), True),
    StructField("DATEADDED", LongType(), True),
    StructField("SOURCEURL", StringType(), True)
])

MENTIONS_SCHEMA = StructType([
    StructField("GLOBALEVENTID", LongType(), True),
    StructField("EventTimeDate", LongType(), True),
    StructField("MentionTimeDate", LongType(), True),
    StructField("MentionType", LongType(), True),
    StructField("MentionSourceName", StringType(), True),
    StructField("MentionIdentifier", StringType(), True),
    StructField("SentenceID", LongType(), True),
    StructField("Actor1CharOffset", LongType(), True),
    StructField("Actor2CharOffset", LongType(), True),
    StructField("ActionCharOffset", LongType(), True),
    StructField("InRawText", LongType(), True),
    StructField("Confidence", LongType(), True),
    StructField("MentionDocLen", LongType(), True),
    StructField("MentionDocTone", FloatType(), True),
    StructField("MentionDocTranslationInfo", StringType(), True),
    StructField("Extras", StringType(), True)
])

FIPS_ISO = dict([('AG', 'DZ'),  # Algerie
                 ('AQ', 'AS'),  # Samoa americain
                 ('AN', 'AD'),  # Andorre
                 ('AV', 'AI'),
                 ('AY', 'AQ'),
                 ('AC', 'AG'),
                 ('AA', 'AW'),
                 ('AS', 'AU'),  # Australie
                 ('AU', 'AT'),
                 ('AJ', 'AZ'),
                 ('BF', 'BS'),
                 ('BA', 'BH'),
                 ('BG', 'BD'),
                 ('BO', 'BY'),
                 ('BH', 'BZ'),
                 ('BN', 'BJ'),
                 ('BD', 'BM'),
                 ('BL', 'BO'),
                 ('BK', 'BA'),
                 ('BC', 'BW'),
                 ('BX', 'BN'),
                 ('BU', 'BG'),
                 ('UV', 'BF'),
                 ('BY', 'BI'),
                 ('CB', 'KH'),
                 ('CJ', 'KY'),
                 ('CT', 'CF'),
                 ('CD', 'TD'),
                 ('CI', 'CL'),
                 ('CH', 'CN'),  # Chine
                 ('KT', 'CX'),
                 ('CK', 'CC'),
                 ('CN', 'KM'),
                 ('CF', 'CG'),
                 ('CG', 'CD'),
                 ('CW', 'CK'),
                 ('CS', 'CR'),
                 ('IV', 'CI'),
                 ('UC', 'CW'),
                 ('EZ', 'CZ'),
                 ('DO', 'DM'),
                 ('DR', 'DO'),
                 ('ES', 'SV'),
                 ('EK', 'GQ'),
                 ('EN', 'EE'),
                 ('FP', 'PF'),
                 ('FS', 'TF'),
                 ('GB', 'GA'),
                 ('GA', 'GM'),
                 ('GG', 'GE'),
                 ('GM', 'DE'),  # Allemagne
                 ('GJ', 'GD'),
                 ('GQ', 'GU'),
                 ('GK', 'GG'),
                 ('GV', 'GN'),
                 ('PU', 'GW'),
                 ('HA', 'HT'),
                 ('VT', 'VA'),
                 ('HO', 'HN'),
                 ('IC', 'IS'),
                 ('IZ', 'IQ'),
                 ('IS', 'IL'),
                 ('JA', 'JP'),
                 ('KR', 'KI'),
                 ('KN', 'KP'),
                 ('KS', 'KR'),
                 ('KU', 'KW'),
                 ('LG', 'LV'),
                 ('LE', 'LB'),
                 ('LT', 'LS'),
                 ('LI', 'LR'),
                 ('LS', 'LI'),
                 ('LH', 'LT'),
                 ('MC', 'MO'),
                 ('MA', 'MG'),
                 ('MI', 'MW'),
                 ('RM', 'MH'),
                 ('MB', 'MQ'),
                 ('MP', 'MU'),
                 ('MF', 'YT'),
                 ('MN', 'MC'),
                 ('MG', 'MN'),
                 ('MJ', 'ME'),
                 ('MH', 'MS'),
                 ('MO', 'MA'),
                 ('BM', 'MM'),
                 ('WA', 'NA'),
                 ('NU', 'NI'),
                 ('NG', 'NE'),
                 ('NI', 'NG'),
                 ('NE', 'NU'),
                 ('CQ', 'MP'),
                 ('MU', 'OM'),
                 ('PS', 'PW'),
                 ('WE', 'PS'),
                 ('PM', 'PA'),
                 ('PP', 'PG'),
                 ('PA', 'PY'),
                 ('RP', 'PH'),
                 ('PC', 'PN'),
                 ('PO', 'PT'),
                 ('RQ', 'PR'),
                 ('RS', 'RU'),
                 ('TB', 'BL'),
                 ('SC', 'KN'),
                 ('ST', 'LC'),
                 ('RN', 'MF'),
                 ('SB', 'PM'),
                 ('TP', 'ST'),
                 ('SG', 'SN'),
                 ('RI', 'RS'),
                 ('SE', 'SC'),
                 ('SN', 'SG'),
                 ('NN', 'SX'),
                 ('BP', 'SB'),
                 ('SF', 'ZA'),
                 ('SX', 'GS'),
                 ('OD', 'SS'),
                 ('SP', 'ES'),
                 ('CE', 'LK'),
                 ('SU', 'SD'),
                 ('NS', 'SR'),
                 ('SV', 'SJ'),
                 ('WZ', 'SZ'),
                 ('SW', 'SE'),  # Suede
                 ('SZ', 'CH'),  # Suisse
                 ('TI', 'TJ'),
                 ('TT', 'TL'),
                 ('TO', 'TG'),
                 ('TL', 'TK'),
                 ('TN', 'TO'),
                 ('TD', 'TT'),
                 ('TS', 'TN'),
                 ('TU', 'TR'),
                 ('TX', 'TM'),
                 ('TK', 'TC'),
                 ('UK', 'GB'),  # Royaume-Uni
                 ('NH', 'VU'),
                 ('VI', 'VG'),
                 ('VQ', 'VI'),
                 ('WI', 'EH'),
                 ('YM', 'YE'),
                 ('ZA', 'ZM'),
                 ('ZI', 'ZW'),
                 ('DA','DK'),
                 ('EI', 'IE'),
                 ('FG', 'GF'),
                 ('LO', 'SK'),
                 ('UP', 'UA'),
                 ('VM', 'VN'),
                 ('GM', 'DE'),
                 ('GG', 'GE'),
                 ('KV', 'XK'),
                 ('YI', 'ME')])

NEWS_SOURCES = ['Web Sources',
                'Offline Sources',
                'CORE Archives',
                'DTIC Archives',
                'JSTOR Archives',
                'Non Textual Sources']

EVENT_ROOT_CODES = ['PUBLIC STATEMENT',
                    'APPEAL',
                    'INTENT TO COOPERATE',
                    'CONSULT',
                    'DIPLOMATIC COOPERATION',
                    'MATERIAL COOPERATION',
                    'PROVIDE AID',
                    'YIELD',
                    'INVESTIGATE',
                    'DEMAND',
                    'DISAPPROVE',
                    'REJECT',
                    'THREATEN',
                    'PROTEST',
                    'FORCE POSTURE',
                    'REDUCE RELATIONS',
                    'COERCE',
                    'ASSAULT',
                    'FIGHT',
                    'MASS VIOLENCE']

QUAD_CLASSES = ['Verbal Cooperation',
                'Material Cooperation',
                'Verbal Conflict',
                'Material Conflict']
